name: Build Project

on:
  workflow_dispatch:  # Permet de déclencher manuellement le workflow
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install LSL-PyOptimizer
        run: bash ./scripts/install.sh

      - name: Build the project
        run: bash ./scripts/build.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-binary
          path: ./dist/text_board.min.lsl

          
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build  # Ne lance la release que si le job 'build' réussit

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags
        
      - name: Get build number
        id: get_build_number
        run: echo "build_number=${{ github.run_number }}" >> $GITHUB_ENV
        
      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag="$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")"
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "$latest_tag"
          echo "last_tag=$latest_tag" >> $GITHUB_ENV
         
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: main-binary

      - name: test
        run: | 
          echo "$last_tag+build.$build_number"
          ls

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.last_tag }}
          release_name: Release ${{ env.last_tag}}+build.${{ env.build_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./text_board.min.lsl
          asset_name: main-binary
          asset_content_type: application/octet-stream
