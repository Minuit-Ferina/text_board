name: Build Project

on:
  workflow_dispatch:

  push:
    tags:
      - 'v*'

jobs:
  # @see https://stackoverflow.com/a/72959712/8179249
  check-current-branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get current branch
        id: check_step
        # 1. Get the list of branches ref where this tag exists
        # 2. Remove 'origin/' from that result
        # 3. Put that string in output
        # => We can now use function 'contains(list, item)''
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch="$(echo ${raw//origin\//} | tr -d '\n')"
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branches where this tag exists : $branch."

  build:
    needs: check-current-branch
    if: contains(${{ needs.check.outputs.branch }}, 'main')`
    uses: ./.github/workflows/reusable/build.yml

          
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags
        
      - name: Get build number
        id: get_build_number
        run: echo "build_number=${{ github.run_number }}" >> $GITHUB_ENV
        
      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag="$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")"
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "$latest_tag"
          echo "last_tag=$latest_tag" >> $GITHUB_ENV
         
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: text_board

      - name: test
        run: | 
          echo "$last_tag+build.$build_number"
          ls

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.last_tag }}
          release_name: Release ${{ env.last_tag}}+build.${{ env.build_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./text_board.min.lsl
          asset_name: text_board.lsl
          asset_content_type: application/octet-stream
